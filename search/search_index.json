{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 My name is Mike Pilkington. I do IT security work. Over 20+ years, I've worked in many roles in IT and IT security. Currently I work full-time for The SANS Institute in an R&D capacity for the SANS DFIR team. In addition, I also teach the Forensics 500 and 508 classes for SANS. In the past, I've written numerous research articles for the SANS DFIR Blog . I will continue to do that from time to time, although admittedly it has been a while. This site is designed for shorter supplemental write-ups. My thought is that I need to get back in the habit of sharing, but not always in full-blown, detailed articles. So here I will write shorter pieces that basically serve as cleaned up notes from some of my research activities. The first article is on the use of MkDocs, which is used to build this site. Although I think MkDocs is awesome, one of the few drawbacks is that it's not a complete blogging platform that supports comments. So if you have any questions, comments, or corrections, please reach out to me via external methods such as Twitter or LinkedIn .","title":"About"},{"location":"#welcome","text":"My name is Mike Pilkington. I do IT security work. Over 20+ years, I've worked in many roles in IT and IT security. Currently I work full-time for The SANS Institute in an R&D capacity for the SANS DFIR team. In addition, I also teach the Forensics 500 and 508 classes for SANS. In the past, I've written numerous research articles for the SANS DFIR Blog . I will continue to do that from time to time, although admittedly it has been a while. This site is designed for shorter supplemental write-ups. My thought is that I need to get back in the habit of sharing, but not always in full-blown, detailed articles. So here I will write shorter pieces that basically serve as cleaned up notes from some of my research activities. The first article is on the use of MkDocs, which is used to build this site. Although I think MkDocs is awesome, one of the few drawbacks is that it's not a complete blogging platform that supports comments. So if you have any questions, comments, or corrections, please reach out to me via external methods such as Twitter or LinkedIn .","title":"Welcome"},{"location":"Misc/detectionlab/","text":"Setting Up Detection Lab on Linux Mint 19.1 \u00b6 This was my process for setting up the awesome Detection Lab project by Chris Long . I referenced Richard Bejtlich's write-up as well as Part 1 of Building Detection Lab in AWS . I installed Detection Lab on Linux Mint 19.1 running on an Intel NUC with 6 th -gen i3 processor (dual-core w/ hyperthreading), 32 GB RAM, and 256 GB SSD. Warning I did most of the steps below and then ran into the following error when running the build script at the end: VBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component MachineWrap, interface IMachine The problem turned out to be that I was performing the install via SSH. After troubleshooting for a while, I found an error in the DetectionLab\\Vagrant\\vagrant_up_logger.log file that showed the vboxmanage command starting with --type gui . Realizing that was not going to work via my SSH connection to my lab machine, I switched to the desktop to re-run the build script. It then worked like a champ. As each virtual machine was started during the install, the console screen for the VM would pop up and then complete the configuration changes to the VM. I didn't realize that a headless install was not supported. So make sure you are doing this at the GUI desktop console (at least when running the build.sh script). Install & Configure VirtualBox \u00b6 Started with a new install of Linux Mint 19.1. After applying all updates ( sudo apt-get update -y && sudo apt-get dist-upgrade -y ), I added screen & ssh server with sudo apt-get update screen ssh . (But as mentioned above, don't use SSH to run the build script at the end.) Now install the latest version of VirtualBox using the VitualBox guide for Linux . (The apt repository is stil verison 5, so you need to install the newer version 6 from the VirtuaBox repo.) First I added deb https://download.virtualbox.org/virtualbox/debian <mydist> contrib (my Mint/Ubuntu distro is bionic ) to /etc/apt/sources.list . Then I ran the following to complete the VirtualBox install: wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add - wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add - sudo apt-get update sudo apt-get install virtualbox-6.0 Next download the the latest extension pack from the main downloads page and install it: sudo VBoxManage extpack install <extension-pack-version>.vbox-extpack Now add your account to the local VirtualBox group: sudo usermod -aG vboxusers <your username> To validate the VirtualBox install, I suggest verifying that you can create and run a VM. You don't even need to install an OS in the VM. Just make sure it will create a run a VM even though you will get a \"No bootable medium found\" message after start up. From a terminal on the desktop, run VirtualBox & to bring up the window. Create a VM and run it. Then close VirtualBox once you've tested a running VM. Install Detection Lab and Prereqs \u00b6 Next install git and download Detection Lab: sudo apt-get install git git clone https://github.com/clong/DetectionLab.git Install Vagrant from the vendor's site . Use the instructions provided there. Pay attention to the notes, such as not using the prepackaged version and disabling other hypervisors (I disabled kvm, although I may not have needed to since I was able to successfully run a VM earlier). I downloaded and installed their current .deb package with: sudo apt install ./vagrant_2.2.4_x86_64.deb If building your own Windows VMs, also install Packer from the vendor's site . Use the instructions provided there. I downloaded their 64-bit Linux binary and unzipped it into /usr/sbin . Install the vagrant-reload plugin: vagrant plugin install vagrant-reload Now reboot your host. Build Detection Lab \u00b6 As my standard user account, I kicked off the install with the option of using the Vagrant Cloud boxes, which are automatically downloaded with the --vagrantonly option: ./build.sh virtualbox --vagrantonly As mentioned in the warning box above, I ran into errors with this build process until I realized that it needs to be performed on the GUI desktop. Once I moved to the desktop, installation went smoothly and finished in less than 2 hours. Here's a look at the finished product:","title":"Setting Up Detection Lab"},{"location":"Misc/detectionlab/#setting-up-detection-lab-on-linux-mint-191","text":"This was my process for setting up the awesome Detection Lab project by Chris Long . I referenced Richard Bejtlich's write-up as well as Part 1 of Building Detection Lab in AWS . I installed Detection Lab on Linux Mint 19.1 running on an Intel NUC with 6 th -gen i3 processor (dual-core w/ hyperthreading), 32 GB RAM, and 256 GB SSD. Warning I did most of the steps below and then ran into the following error when running the build script at the end: VBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component MachineWrap, interface IMachine The problem turned out to be that I was performing the install via SSH. After troubleshooting for a while, I found an error in the DetectionLab\\Vagrant\\vagrant_up_logger.log file that showed the vboxmanage command starting with --type gui . Realizing that was not going to work via my SSH connection to my lab machine, I switched to the desktop to re-run the build script. It then worked like a champ. As each virtual machine was started during the install, the console screen for the VM would pop up and then complete the configuration changes to the VM. I didn't realize that a headless install was not supported. So make sure you are doing this at the GUI desktop console (at least when running the build.sh script).","title":"Setting Up Detection Lab on Linux Mint 19.1"},{"location":"Misc/detectionlab/#install-configure-virtualbox","text":"Started with a new install of Linux Mint 19.1. After applying all updates ( sudo apt-get update -y && sudo apt-get dist-upgrade -y ), I added screen & ssh server with sudo apt-get update screen ssh . (But as mentioned above, don't use SSH to run the build script at the end.) Now install the latest version of VirtualBox using the VitualBox guide for Linux . (The apt repository is stil verison 5, so you need to install the newer version 6 from the VirtuaBox repo.) First I added deb https://download.virtualbox.org/virtualbox/debian <mydist> contrib (my Mint/Ubuntu distro is bionic ) to /etc/apt/sources.list . Then I ran the following to complete the VirtualBox install: wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add - wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add - sudo apt-get update sudo apt-get install virtualbox-6.0 Next download the the latest extension pack from the main downloads page and install it: sudo VBoxManage extpack install <extension-pack-version>.vbox-extpack Now add your account to the local VirtualBox group: sudo usermod -aG vboxusers <your username> To validate the VirtualBox install, I suggest verifying that you can create and run a VM. You don't even need to install an OS in the VM. Just make sure it will create a run a VM even though you will get a \"No bootable medium found\" message after start up. From a terminal on the desktop, run VirtualBox & to bring up the window. Create a VM and run it. Then close VirtualBox once you've tested a running VM.","title":"Install &amp; Configure VirtualBox"},{"location":"Misc/detectionlab/#install-detection-lab-and-prereqs","text":"Next install git and download Detection Lab: sudo apt-get install git git clone https://github.com/clong/DetectionLab.git Install Vagrant from the vendor's site . Use the instructions provided there. Pay attention to the notes, such as not using the prepackaged version and disabling other hypervisors (I disabled kvm, although I may not have needed to since I was able to successfully run a VM earlier). I downloaded and installed their current .deb package with: sudo apt install ./vagrant_2.2.4_x86_64.deb If building your own Windows VMs, also install Packer from the vendor's site . Use the instructions provided there. I downloaded their 64-bit Linux binary and unzipped it into /usr/sbin . Install the vagrant-reload plugin: vagrant plugin install vagrant-reload Now reboot your host.","title":"Install Detection Lab and Prereqs"},{"location":"Misc/detectionlab/#build-detection-lab","text":"As my standard user account, I kicked off the install with the option of using the Vagrant Cloud boxes, which are automatically downloaded with the --vagrantonly option: ./build.sh virtualbox --vagrantonly As mentioned in the warning box above, I ran into errors with this build process until I realized that it needs to be performed on the GUI desktop. Once I moved to the desktop, installation went smoothly and finished in less than 2 hours. Here's a look at the finished product:","title":"Build Detection Lab"},{"location":"documentation/installing-mkdocs/","text":"Installing MkDocs \u00b6 MkDocs is a clean, simple, yet powerful, static site generator (SSG) that takes markdown text files and turns them into a nicely styled web site. There are many SSGs out there that are excellent too, but this is one that I've been experimenting with lately. It's great for documentation purposes, which is the primary use of this site--to document some of the projects and findings I dig into. That said, you may want to look into other options. The following is an extensive compilation of static site generators, all worth considering: https://github.com/myles/awesome-static-generators . If you decide to try out MkDocs, below is a basic set of steps you can use to install it on Windows or Ubuntu, along with the Material theme. Most of this is directly from https://alinex.gitlab.io/env/mkdocs/ . Kudos for great info on that site! Once installed, I also suggest checking out the following: The main MkDocs site of course: https://www.mkdocs.org/ The Material theme documentation: https://squidfunk.github.io/mkdocs-material/ Markdown cheatsheet for MkDocs: https://3os.org/markdownCheatSheet/welcome/ And worth mentioning again: https://alinex.gitlab.io/env/mkdocs/ Windows in WSL \u00b6 I suggest installing in Ubuntu with Windows Services for Linux (WSL) as follows: Note This should work identically in a standard Ubuntu host/VM. Install and update WSL: sudo apt-get update -y && sudo apt-get upgrade -y Install necessary packages: sudo apt install build-essential python3-dev python3-pip python3-setuptools python3-wheel python3-cffi libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libgdk-pixbuf2.0-0 libffi-dev shared-mime-info Verify version (you will likely get an error here): python --version pip --version If you get errors, add these aliases to ~/.bashrc : alias python=python3 alias pip=pip3 Regardless of whether you got errors above, add the following to the end of ~/.bashrc : PATH=$PATH:~/.local/bin Now source .bashrc: source ~/.bashrc Now install the python packages: pip install mkdocs pip install mkdocs-material pip install pygments pip install pymdown-extensions pip install markdown-blockdiag pip install markdown-include pip install mkdocs-pdf-export-plugin That should get it done. Now you can run various MkDocs commands, such as building a new site with mkdocs new <sitename> . Then add and edit markdown files and view them live as HTML in your browser with the mkdocs serve command.","title":"Installing MkDocs"},{"location":"documentation/installing-mkdocs/#installing-mkdocs","text":"MkDocs is a clean, simple, yet powerful, static site generator (SSG) that takes markdown text files and turns them into a nicely styled web site. There are many SSGs out there that are excellent too, but this is one that I've been experimenting with lately. It's great for documentation purposes, which is the primary use of this site--to document some of the projects and findings I dig into. That said, you may want to look into other options. The following is an extensive compilation of static site generators, all worth considering: https://github.com/myles/awesome-static-generators . If you decide to try out MkDocs, below is a basic set of steps you can use to install it on Windows or Ubuntu, along with the Material theme. Most of this is directly from https://alinex.gitlab.io/env/mkdocs/ . Kudos for great info on that site! Once installed, I also suggest checking out the following: The main MkDocs site of course: https://www.mkdocs.org/ The Material theme documentation: https://squidfunk.github.io/mkdocs-material/ Markdown cheatsheet for MkDocs: https://3os.org/markdownCheatSheet/welcome/ And worth mentioning again: https://alinex.gitlab.io/env/mkdocs/","title":"Installing MkDocs"},{"location":"documentation/installing-mkdocs/#windows-in-wsl","text":"I suggest installing in Ubuntu with Windows Services for Linux (WSL) as follows: Note This should work identically in a standard Ubuntu host/VM. Install and update WSL: sudo apt-get update -y && sudo apt-get upgrade -y Install necessary packages: sudo apt install build-essential python3-dev python3-pip python3-setuptools python3-wheel python3-cffi libcairo2 libpango-1.0-0 libpangocairo-1.0-0 libgdk-pixbuf2.0-0 libffi-dev shared-mime-info Verify version (you will likely get an error here): python --version pip --version If you get errors, add these aliases to ~/.bashrc : alias python=python3 alias pip=pip3 Regardless of whether you got errors above, add the following to the end of ~/.bashrc : PATH=$PATH:~/.local/bin Now source .bashrc: source ~/.bashrc Now install the python packages: pip install mkdocs pip install mkdocs-material pip install pygments pip install pymdown-extensions pip install markdown-blockdiag pip install markdown-include pip install mkdocs-pdf-export-plugin That should get it done. Now you can run various MkDocs commands, such as building a new site with mkdocs new <sitename> . Then add and edit markdown files and view them live as HTML in your browser with the mkdocs serve command.","title":"Windows in WSL"}]}